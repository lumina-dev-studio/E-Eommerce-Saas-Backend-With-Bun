// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  password         String
  confirmPassword  String     
  address          String
  phoneNumber      String
  image            String?
  facebook         String?
  tiktok           String?
  instagram        String?
  role             Role        @default(User)
  createdAt        DateTime?   @default(now())
  updatedAt        DateTime?   @updatedAt
  products         Product[]   @relation("UserProducts")  // One-to-many relation to Product
   logos           Logo[]            @relation("UserLogos")
  numbers          Number[]          @relation("UserNumbers")
  socialAccounts   SocialAccount[]   @relation("UserSocialAccounts")
}




model SimpleUser {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  password         String
  role             String
}



model Product {
  id                      String                    @id @default(uuid()) // UUID as primary key
  userId                  String                    // Foreign key for User
  collections             String
  compareAtPrice          Float
  category                String
  cost                    Float
  margin                  Float
  price                   Float
  profit                  Float
  status                  String
  tags                    String
  tax                     Boolean
  themeTemplate           String
  title                   String
  weight                  Float
  weightSize              String
  description             String
  productMediaImages      ProductMediaImage[]       // One-to-many relationship
  productVariants         ProductVariant[]          // One-to-many relationship
  user                    User                      @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)  // Relation back to User
}

model ProductMediaImage {
  id          String  @id @default(uuid()) // UUID as primary key
  imageUrl    String
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id                        String                         @id @default(uuid()) // UUID as primary key
  optionName                String
  productId                 String
  product                   Product                        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantOptionValues ProductVariantOptionValue[]    // One-to-many relationship
}

model ProductVariantOptionValue {
  id               String              @id @default(uuid()) // UUID as primary key
  value            String
  price            Float
  available        Int
  imageUrl         String
  productVariantId String
  productVariant   ProductVariant       @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
} 


model ProductCategory {
  id              String  @id @default(uuid()) // UUID as primary key
  categoryName    String   
  categoryImage   String
 
}

model NavigationItem {
  id        Int              @id @default(autoincrement())
  name      String
  path      String
  icon      String?          // Icon or emoji field
  parentId  Int?             // Parent for nesting
  parent    NavigationItem?  @relation("ParentRelation", fields: [parentId], references: [id])
  children  NavigationItem[] @relation("ParentRelation")
}
model Logo {
  id      Int   @id @default(autoincrement())
  logoUrl String?
  userId  String
  user    User  @relation("UserLogos", fields: [userId], references: [id], onDelete: Cascade)
}

model Number {
  id      Int   @id @default(autoincrement())
  number  String?
  userId  String
  user    User  @relation("UserNumbers", fields: [userId], references: [id], onDelete: Cascade)
}

model SocialAccount {
  id        Int     @id @default(autoincrement())
  account   String?  
  emoji     String?  // Stores emoji or any text associated with the social account
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation("UserSocialAccounts", fields: [userId], references: [id], onDelete: Cascade)
}




enum Role {
  User
  Admin
}
